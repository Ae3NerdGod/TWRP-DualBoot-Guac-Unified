#!/sbin/sh
# TWRP A/B Installer Backend
# by Zackptg5, Osm0sis, Dees_Troy, Topjohnwu, and CosmicDan

# Functions needed early
ui_print() { $BOOTMODE && echo "$1" || echo -e "ui_print $1\nui_print" >> $OUTFD; }
abort() { ui_print "$1"; ui_print " "; exit 1; }

# Set vars
OUTFD=/proc/self/fd/$2
ZIPFILE="$3"
tmp=/dev/tmp/twrp-install
target=/dev/block/bootdevice/by-name/boot
magiskdata=false
mountdata=true
format=true
KEEPVERITY=false
RECOVERYMODE=false
PERSISTDIR=/persist
mkdir /persist 2>/dev/null

# Make sure random don't get blocked, unset library paths
mount -o bind /dev/urandom /dev/random
OLD_LD_PATH=$LD_LIBRARY_PATH
OLD_LD_PRE=$LD_PRELOAD
OLD_LD_CFG=$LD_CONFIG_FILE
unset LD_LIBRARY_PATH LD_PRELOAD LD_CONFIG_FILE

# detect Magisk Manager/booted flashing
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true
$BOOTMODE && abort "! Flash in TWRP - use img by mauronofrio if first install!"

case $ZIPFILE in
  "/sideload/package.zip"|"/tmp/"*|"/dev/"*) ;;
  *) cp -f "$ZIPFILE" "/tmp/$(basename "$ZIPFILE")"; ui_print " "; ui_print "! Zip can't be flashed from $(dirname "$ZIPFILE")"; abort "! Copied to /tmp - flash from there";;
esac

ui_print "###########################################"
ui_print "#         TWRP + Magisk Installer         #"
ui_print "#          with a/b userdata for          #"
ui_print "#        OnePlus 7/7 Pro/7 Pro 5G         #"
ui_print "#               by Zackptg5               #"
ui_print "###########################################"
ui_print "#        TWRP build by Mauronofrio        #"
ui_print "###########################################"
ui_print "# Note that this will also disable verity #"
ui_print "###########################################"
ui_print " "

set -x
rm -rf $tmp
mkdir -p $tmp
unzip -o "$ZIPFILE" -d $tmp || abort "Failed to extract zip!"
sleep 1

# Device check
supported=false
ui_print "- Checking device compatibility"
for i in OnePlus7Pro guacamole OnePlus7 guacamoleb OnePlus7ProTMO guacamolet OP7ProNRSpr guacamoles; do
  for prop in "ro.product.device" "ro.build.product" "ro.product.vendor.device" "ro.vendor.product.device" "ro.omni.device"; do
    if [ "$(getprop $prop)" == "$i" ]; then
      ui_print "  Supported Device Detected!"
      supported=true
      [ $(sgdisk --print /dev/block/sda | head -n1 | awk '{printf "%d", $5}') -ge 128 ] && totsize=256 || totsize=128
      ui_print "  $totsize gb device detected!"
      break 2
    fi
  done
done
$supported || abort "  Unsupported device! Aborting!"

# Setup tools
export tools=$tmp/tools
cd $tools
chmod -R 0755 $tools
export PATH=$tools:$PATH
cp -af magiskinit magiskpolicy
busybox --install -s .
. functions.sh
cd $tmp

# Get current layout
if [ "$(sgdisk --print /dev/block/sda | grep -i userdata_a)" ]; then
  if [ "$(sgdisk --print /dev/block/sda | grep -i userdata2)" ]; then
    curlayout="a/b/c"
    typec="$(blkid /dev/block/sda$(sgdisk --print /dev/block/sda | grep -i userdata2 | awk '{print $1}') | awk '{gsub("TYPE=|\"","",$3); print $3}')"
  else
    curlayout="a/b"
  fi
  cursize=$(sgdisk --print /dev/block/sda | grep -i userdata_a | awk '{printf "%d", $4}')
  typea="$(blkid /dev/block/sda$(sgdisk --print /dev/block/sda | grep -i userdata_a | awk '{print $1}') | awk '{gsub("TYPE=|\"","",$3); print $3}')"
  typeb="$(blkid /dev/block/sda$(sgdisk --print /dev/block/sda | grep -i userdata_b | awk '{print $1}') | awk '{gsub("TYPE=|\"","",$3); print $3}')"
else
  curlayout="stock"
  cursize=$(sgdisk --print /dev/block/sda | grep -i userdata | awk '{printf "%d", $4}')
  typea="$(blkid /dev/block/sda$(sgdisk --print /dev/block/sda | grep -i userdata | awk '{print $1}') | awk '{gsub("TYPE=|\"","",$3); print $3}')"
  typeb="$typea"
fi
size=$cursize

# Script can't format actively decrypted userdata
if mount | grep '/dev/block/dm-0'; then
  ui_print " "
  ui_print "  Mounted userdata is currently encrypted!"
  ui_print "  This script is unable to format it"
  ui_print " "
  ui_print "  If you want to repartition/change size/format,"
  ui_print "  format data in TWRP gui, then run this zip"
  ui_print " "
  ui_print "  Otherwise, continue"
  ui_print " "
  sleep 3
  ui_print "- Continue?"
  ui_print "  Vol+ yes, Vol- no"
  chooseport && { mountdata=false; format=false; layout=$curlayout; } || exit 0
fi

ui_print " "
ui_print "- Current layout: $curlayout, userdata size: $cursize gb"
# Set new layout
if [ -z "$layout" ]; then
  ui_print "  Keep current layout?"
  ui_print "  Vol+ yes, Vol- no"
  if chooseport; then
    layout="$curlayout"
    format=false
    if [ "$layout" == "a/b/c" ]; then
      ui_print " "
      ui_print "  Remember that magisk is required for a/b/c"
      ui_print "  and will be auto-selected for install"
    fi
  else
    ui_print " "
    ui_print "- Switch to a/b/(c) userdata or stock?"
    ui_print "  Vol+ a/b/(c), Vol- stock"
    if chooseport; then
      ui_print " "
      ui_print "- Have a common data partition or pure a/b?"
      ui_print "  Note that common data partition is not encryptable"
      ui_print "  Magisk is required for a/b/c"
      ui_print "  Vol+ a/b/c, Vol- a/b only"
      chooseport && layout="a/b/c" || layout="a/b"
      [ "$layout" == "a/b/c" ] && select_size
    else
      layout="stock"
    fi
    select_format
  fi
fi
# Set other args
if [ "$layout" == "stock" ]; then
  ui_print " "
  ui_print "- Dm-Verity: Keep as is or Disable??"
  ui_print "  If you made ANY modifications outside of data"
  ui_print "  this should be disabled"
  ui_print "  Vol+ Do not change, Vol- Disable (Recommended)"
  chooseport && KEEPVERITY=true
fi
ui_print " "
ui_print "- Forced Encryption: Keep as is or Disable?"
ui_print "  Vol+ Do not change, Vol- Disable"
chooseport && KEEPFORCEENCRYPT=true || KEEPFORCEENCRYPT=false
# Magisk is required for common data mounting in oos - even permissive selinux won't cut it - problem occurs with modification to fstab - too early in boot to debug
if [ "$layout" == "a/b/c" ]; then
  magisk=true
else
  ui_print " "
  ui_print "- Install magisk to both slots?"
  ui_print "  Vol+ yes, Vol- no"
  chooseport && magisk=true || magisk=false
fi
if $magisk && ! $mountdata; then
  ui_print " "
  ui_print "  Magisk will patch boot img only"
  ui_print "  You'll need to install the apk normally"
  ui_print "  And it'll prompt you to install the rest"
  sleep 3
fi

ui_print " "
ui_print "- Selected Options"
[ "$layout" != "$curlayout" ] && ui_print "  Layout: $curlayout -> $layout" || ui_print "  Layout: $curlayout"
[ $cursize != $size ] && ui_print "  Userdata Size: $cursize -> $size gb" || ui_print "  Userdata Size: $size gb"
if $format; then
  ui_print "  Format Data: Yes"
  if [ "$layout" == "stock" ]; then
    ui_print "  Userdata: $typea"
  else
    ui_print "  Userdata_a: $typea"
    ui_print "  Userdata_b: $typeb"
    [ "$layout" == "a/b/c" ] && ui_print "  Common Data: $typec"
  fi
else
  ui_print "  Format Data: No"
fi
$KEEPFORCEENCRYPT && ui_print "  Forced Encryption: Enabled/Not Changed" || ui_print "  Forced Encryption: Disabled"
$KEEPVERITY && ui_print "  Dm-Verity: Enabled/Not Changed" || ui_print "  Dm-Verity: Disabled"
$magisk && ui_print "  Root: Magisk" || ui_print "  Root: None"
sleep 1
ui_print " "
ui_print "- Last Chance - Are you sure?"
[ "$layout" != "$curlayout" ] && { ui_print "  All data including internal storage will be wiped"; sleep 1; }
ui_print "  Vol+ yes, Vol- no (exit installer)"
chooseport && ui_print " " || { ui_print " "; ui_print "Exiting installer!"; exit 0; }
ui_print "- Beginning install"
export KEEPVERITY
export KEEPFORCEENCRYPT

# Patch TWRP if needed for slot userdata and metadata
if [ "$layout" != "stock" ]; then
  magiskboot cpio ramdisk-recovery.cpio "extract etc/recovery.wipe recovery.wipe"
  sed -i 's|^/dev/block/bootdevice/by-name/userdata$|/dev/block/bootdevice/by-name/userdata_a\n/dev/block/bootdevice/by-name/userdata_b|' recovery.wipe
  magiskboot cpio ramdisk-recovery.cpio "add 0644 etc/recovery.wipe recovery.wipe"
  magiskboot cpio ramdisk-recovery.cpio "extract etc/twrp.fstab twrp.fstab"
  sed -ri -e 's|(/userdata.*flags=)|\1slotselect;|' -e 's|(.*name/metadata) *|\1\t\t\t\t\tflags=slotselect;backup=0;display="Metadata"|' twrp.fstab
  [ "$layout" == "a/b/c" ] && { sed -i "\|^/data|a/datacommon\t\t$typec\t/dev/block/bootdevice/by-name/userdata2\t\t\t\t\tflags=display=\"Common Storage\";wipeingui;storage" twrp.fstab; magiskboot cpio ramdisk-recovery.cpio "mkdir 0771 datacommon"; }
  magiskboot cpio ramdisk-recovery.cpio "add 0644 etc/twrp.fstab twrp.fstab"
fi
# Add missing useful binaries
for i in magiskboot magiskpolicy sgdisk; do
  magiskboot cpio ramdisk-recovery.cpio "exists /sbin/$i" || magiskboot cpio ramdisk-recovery.cpio "add 0755 sbin/$i $tools/$i"
done

# Reparition and/or format userdata and metadata if applicable
unmountAllAndRefreshPartitions
$format && repartition_userdata
blockdev --rereadpt /dev/block/sda
sleep 0.2
sync
sleep 0.2

# Everything else
for slot_select in active inactive; do
  reset_slot
  ui_print " "
  ui_print "- Patching $slot_select slot: $slot..."
  mkdir boot
  cd boot
  dd bs=1048576 if=$target$slot of=boot.img
  magiskboot unpack -h boot.img

  # boot.img header cmdline remove skip_override (flar2 patch)
  sed -i "s|$(grep '^cmdline=' header | cut -d= -f2-)|$(grep '^cmdline=' header | cut -d= -f2- | sed -e 's/skip_override//' -e 's/  */ /g' -e 's/[ \t]*$//')|" header

  # Install twrp
  cp -f $tmp/ramdisk-recovery.cpio ramdisk.cpio
  if [ "$(eval echo "\$type$(echo $slot | cut -d _ -f2)")" == "f2fs" ]; then
    cp -f $tmp/twrp.fstab twrp.fstab
    sed -ri "s|(^/data\t* *)ext4|\1f2fs|" twrp.fstab
    magiskboot cpio ramdisk.cpio "add 0644 etc/twrp.fstab twrp.fstab"
    rm -f twrp.fstab
  fi

  # Possibly using 2SI, export env var
  magiskboot cpio ramdisk.cpio test
  STATUS=$?
  [ $((STATUS & 8)) -ne 0 ] && export TWOSTAGEINIT=true

  # Mount other needed partitions
  mount "/dev/block/bootdevice/by-name/system$slot" /system
  mount --move /system /system_root
  mount -o bind /system_root/system /system
	mount "/dev/block/bootdevice/by-name/vendor$slot" /vendor
  mount "/dev/block/bootdevice/by-name/odm$slot" /odm
  mount /dev/block/bootdevice/by-name/persist /persist

  if [ -f /system/build.prop ]; then
    if ! $KEEPVERITY; then
      rm -rf /system_root/datacommon /system_root/init.mount_datacommon.sh
      [ "$(grep '# Zackptg5-DualBoot' /system_root/init.rc)" ] && sed -i -e "/# Zackptg5-DualBootMod/,/init.mount_datacommon.sh/d" -e "$d" /system_root/init.rc
      while true; do 
        [ "$(tail -n1 /system_root/init.rc)" ] && break || sed -i '$d' /system_root/init.rc
      done

      # Get location of sepolicy
      $magisk && context=magisk || context=shell
      [ -f /system/etc/selinux/plat_sepolicy.cil.bak ] && mv -f /system/etc/selinux/plat_sepolicy.cil.bak /system/etc/selinux/plat_sepolicy.cil
      if [ -f /system/etc/selinux/plat_sepolicy.cil ]; then
        # Split policy
        if [ -f /odm/etc/selinux/precompiled_sepolicy ]; then
          file=/odm/etc/selinux/precompiled_sepolicy
        elif [ -f /vendor/etc/selinux/precompiled_sepolicy ]; then
          file=/vendor/etc/selinux/precompiled_sepolicy
        # elif [ -e /system_root/force_debuggable ] && [ -f /system_root/adb_debug.prop ] && [ -f /system_root/userdebug_plat_sepolicy.cil ]; then
          # file=/system_root/userdebug_plat_sepolicy.cil
        else
          # file=/system/etc/selinux/plat_sepolicy.cil
          # Modifying cil ends up in QCOM Fastboot so we'll force monolithic creation instead
          file=/system_root/sepolicy
          rm -f $file
          magiskpolicy --compile-split --save $file
          mv -f /system/etc/selinux/plat_sepolicy.cil /system/etc/selinux/plat_sepolicy.cil.bak
        fi
      # Monolithic policy
      elif [ -f /system_root/sepolicy ]; then
        file=/system_root/sepolicy
      else
        # Ramdisk sepolicy is for recovery only
        abort "  Sepolicy not found! Report to @Zackptg5"
      fi

      # (permissive vold) (permissive shell)\n(allow init media_rw_data_file dir mounton)
      # if [ "$(echo $file | awk -F '.' '{print $NF}')" == "cil" ] && [ ! "$(grep "$1" $file)" ]; then
      #   echo "$1" >> $file
      #   # Regenerate sha256sum - note that order of files matters (main file followed by mapping)
      #   [ "$file" == "/system/etc/selinux/plat_sepolicy.cil" ] && cat $file /system/etc/selinux/mappings/$(cat /vendor/etc/selinux/plat_sepolicy_vers.txt).cil | sha256sum -b > /system/etc/selinux/plat_sepolicy_and_mapping.sha256
      # else
      #   magiskpolicy --load $file --save $file $2
      # fi

      ui_print "  Patching sepolicy"
      # Needed for encryption -> "Unable to measure size of /dev/block/bootdevice/by-name/userdata_x: Permission denied"
      $KEEPFORCEENCRYPT && magiskpolicy --load $file --save $file "allow vold * * *"

      if [ "$layout" == "a/b/c" ]; then
        magiskpolicy --load $file --save $file "allow init media_rw_data_file dir mounton" "allow fsck block_device blk_file { ioctl read write getattr lock append map open }"
        $magisk || magiskpolicy --load $file --save $file "allow shell * * *"

        ui_print "  Installing commondata mount script"
        mkdir /system_root/datacommon 2>/dev/null
        set_perm /system_root/datacommon media_rw media_rw 0771 u:object_r:media_rw_data_file:s0
        cp -f $tmp/init.mount_datacommon.sh /system_root/init.mount_datacommon.sh
        set_perm /system_root/init.mount_datacommon.sh 0 2000 0755 u:object_r:shell_exec:s0
        echo -e "\n# Zackptg5-DualBootMod\non property:sys.boot_completed=1\n    exec_background u:r:$context:s0 -- /init.mount_datacommon.sh" >> /system_root/init.rc
      fi
    fi

    # Un/Install Magisk, patch verity otherwise since we're likely modifying system
    if $mountdata; then
      [ "$layout" == "stock" ] && mount "/dev/block/bootdevice/by-name/userdata" /data || mount "/dev/block/bootdevice/by-name/userdata$slot" /data
    fi
    if $magisk; then
      . magisk.sh
    else
      ui_print "  Patching ramdisk"
      magiskboot cpio ramdisk.cpio patch
      rm -rf \
      /cache/*magisk* /cache/unblock /data/*magisk* /data/cache/*magisk* /data/property/*magisk* \
      /data/Magisk.apk /data/busybox /data/custom_ramdisk_patch.sh /data/adb/*magisk* \
      /data/adb/post-fs-data.d /data/adb/service.d /data/adb/modules* $PERSISTDIR/magisk \
      /system/addon.d/99-magisk.sh \
      /data/user*/*/*magisk* /data/app/*magisk* 2>/dev/null
    fi

    binary_patches
    patch_dtb_partitions
    $magiskdata && run_migrations

    # Patch vendor fstabs
    FSTABS="$(find /system_root /vendor/etc /odm/etc -maxdepth 1 -type f -name "fstab.qcom" | sed 's|^./|/|')"
    [ "$FSTABS" ] && ! $KEEPVERITY && patch_fstabs
  else
    ui_print " "
    ui_print "  No OS installed to this slot!"
    ui_print "  Skipping non-boot img related functions!"
    ui_print "  Flash this zip again after installing OS"
    ui_print " "
  fi

  # Repack
  ui_print "  Repacking boot img"
  magiskboot repack boot.img new-boot.img
  cat new-boot.img /dev/zero > $target$slot 2>/dev/null || true
  magiskboot cleanup
  
  cd $tmp
  rm -rf boot

  umount -f /system
  sleep 0.5
  unmountAllAndRefreshPartitions
done

umount -l /dev/random 2>/dev/null
[ -z $OLD_LD_LIB ] || export LD_LIBRARY_PATH=$OLD_LD_LIB
[ -z $OLD_LD_PRE ] || export LD_PRELOAD=$OLD_LD_PRE
[ -z $OLD_LD_CFG ] || export LD_CONFIG_FILE=$OLD_LD_CFG

cd /
rm -rf /dev/tmp

ui_print " "
$magisk && ui_print "- Done installing TWRP + Magisk!" || { ui_print "- Done installing TWRP!"; ui_print " "; ui_print "*** NOTE: You are now unrooted! ***"; }
ui_print " "

mount /data
exit 0
